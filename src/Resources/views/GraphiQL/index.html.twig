<!--
 *  Copyright (c) 2021 GraphQL Contributors
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE file in the root directory of this source tree.
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>GraphiQL</title>
    <style>
        body {
            height: 100%;
            margin: 0;
            width: 100%;
            overflow: hidden;
        }
        #graphiql {
            height: 100vh;
        }
    </style>

    <!--
      This GraphiQL example depends on Promise and fetch, which are available in
      modern browsers, but can be "polyfilled" for older browsers.
      GraphiQL itself depends on React DOM.
      If you do not want to rely on a CDN, you can host these files locally or
      include them directly in your favored resource bundler.
    -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!--
      These two files can be found in the npm module, however you may wish to
      copy them directly into your environment, or perhaps include them in your
      favored resource bundler.
     -->
    <script src="https://graphiql-test.netlify.app/graphiql.min.js"></script><link href="https://graphiql-test.netlify.app/graphiql.min.css" rel="stylesheet"></head>
{% block body %}
<body>
<div id="graphiql">Loading...</div>
<script type="application/javascript">
    window.GraphQLVersion = "16.5.0"
</script>
{% block body_script %}
<script type="application/javascript">
    /* global React, ReactDOM, GraphiQL, GraphQLVersion */

    /**
     * UMD GraphiQL Example
     *
     * This is a simple example that provides a primitive query string parser on top of GraphiQL props
     * It assumes a global umd GraphiQL, which would be provided by an index.html in the default example
     *
     * It is used by:
     * - the netlify demo
     * - end to end tests
     * - webpack dev server
     */

    var endpoint = {{ endpoint | json_encode | raw }};

// Parse the search string to get url parameters.
    const parameters = {};
    for (const entry of window.location.search.slice(1).split('&')) {
        const eq = entry.indexOf('=');
        if (eq >= 0) {
            parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(
                entry.slice(eq + 1),
            );
        }
    }

    // When the query and variables string is edited, update the URL bar so
    // that it can be easily shared.
    function onEditQuery(newQuery) {
        parameters.query = newQuery;
        updateURL();
    }

    function onEditVariables(newVariables) {
        parameters.variables = newVariables;
        updateURL();
    }

    function onEditHeaders(newHeaders) {
        parameters.headers = newHeaders;
        updateURL();
    }

    function onTabChange(tabsState) {
        const activeTab = tabsState.tabs[tabsState.activeTabIndex];
        parameters.query = activeTab.query;
        parameters.variables = activeTab.variables;
        parameters.headers = activeTab.headers;
        updateURL();
    }

    function updateURL() {
        const newSearch = Object.entries(parameters)
            .filter(([_key, value]) => value)
            .map(
                ([key, value]) =>
                    encodeURIComponent(key) + '=' + encodeURIComponent(value),
            )
            .join('&');
        history.replaceState(null, null, `?${newSearch}`);
    }

    // Render <GraphiQL /> into the body.
    // See the README in the top level of this module to learn more about
    // how you can customize GraphiQL by providing different values or
    // additional child elements.
    const root = ReactDOM.createRoot(document.getElementById('graphiql'));

    root.render(
        React.createElement(GraphiQL, {
            fetcher: GraphiQL.createFetcher({
                url: endpoint
            }),
            query: parameters.query,
            variables: parameters.variables,
            headers: parameters.headers,
            defaultHeaders: parameters.defaultHeaders,
            onEditQuery,
            onEditVariables,
            onEditHeaders,
            defaultEditorToolsVisibility: true,
            isHeadersEditorEnabled: true,
            shouldPersistHeaders: true,
            //inputValueDeprecation: GraphQLVersion.includes('15.5') ? undefined : true,
            inputValueDeprecation: undefined,
            onTabChange,
        }),
    );
</script>
{% endblock body_script %}
{% endblock body %}
</body>
</html>